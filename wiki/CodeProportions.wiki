#Other Features

  * *BugPrison*
    * _Detain your bugs in the bug prison_
  * *ProjectSettings*
    * _Apply common settings and transfer them from one project to another with ease_
  * *YellowCount*
    * _Visualize the current amount of compiler warnings and other 'yellow' markers in the workspace_

#summary Code proportions measurements direct your attention to the right places

= What's it about? =

There is no exact science of the Good Code. This means there is probably no precise formula to determine the quality of a code base. But there are some indicators that can give you a clue. Here is one: if your code goes out of proportion, something's probably wrong.

Measuring code proportions while you code helps you to direct your attention to the places where readability and extensibility suffer. For example, if in a certain area of your code base package or classes classes grow too big, methods become too long or too complex, or dependencies between classes get too tight, then you know you have to think about your design. The *Code Proportions* features in USUS are intended to help us identify that sort of situation quickly and find out what to do.

= How to use it? =

Best start from the Usus perspective (Window > Open Perspective > (Other) > Project Usus). On the left-hand side (stacked behind the Package Explorer) you see a View called *Projects covered by Usus*. Select some Java projects you're working on.

In the middle on the left, you see the *Code Proportions Cockpit* View.

<img src="http://projectusus.googlecode.com/svn/wiki/img/mainPerspective.png" width="924">

The *Code Proportions Cockpit* shows the status of the current indicators. They are computed on any resource change in the workspace, but you can force a full re-compute by pressing the 'Refresh' button in the top-right corner of the View.

Whenever a full set of code proportions could be measured (i.e. when both a full computation was done _and_ a coverage launch of the main test suite was run, a checkpoint is saved an plotted on the diagram in the middle of the right-hand side of the perspective (the *Usus History* View).

In addition, you can see the hotspots (highest violations) on the *Usus Hotspots* View (stacked behind the History View). Double-clicking a hotspot opens the Java editor at the corresponding source location.