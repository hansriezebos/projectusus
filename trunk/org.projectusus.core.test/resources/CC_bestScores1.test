public class CC_bestScores1 {
    public List<IBestOfScore> bestScores() {
        List<IBestOfScore> bestScores = new ArrayList<IBestOfScore>();
        for( IScore score : scoreDao.findAll() ) {
            int points = 0;
            BestOfScore bestOfScore = new BestOfScore();
            bestOfScore.setCourse( score.getCourse() );
            bestOfScore.setDay( score.getDay() );
            bestOfScore.setHandicap( score.getHandicap() );
            for( HoleNumber holeNumber : HoleNumber.values() ) {
                NetScore netScore = new NetScore( score, score.getHandicap() );
                StrokeCount strokes = netScore.getStrokes( holeNumber );
                int par = score.getCourse().getHole( holeNumber ).getPar();
                int stablefordScore = 2 + par - strokes.get();
                points += stablefordScore;
            }
            bestOfScore.setTotalStablefordPoints( points );
            bestScores.add( bestOfScore );
        }
        Collections.sort( bestScores, new Comparator<IBestOfScore>() {
            public int compare( IBestOfScore bestOfScore1, IBestOfScore
bestOfScore2 ) {
                // TODO order by course after score?
                Integer stablefordPoints1 = Integer.valueOf(
bestOfScore1.getTotalStablefordPoints() );
                Integer stablefordPoints2 = Integer.valueOf(
bestOfScore2.getTotalStablefordPoints() );
                return -1 * stablefordPoints1.compareTo( stablefordPoints2 );
            }
        } );
        return bestScores;
    }
}