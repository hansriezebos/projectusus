One suite that suits them all

In software projects with sizeable code bases maintaining the suite of all unit
tests regularly becomes an issue: developers want to be able to execute the
entire collection of tests with a single command, but an AllTests suite that
lists the test cases explicitly must be kept manually, which is inefficient
and error-prone.

The well-known ClassPathSuite[1] solves this problem elegantly, but it has its 
weaknesses, too: it becomes slow on large workspaces, and also executes static
code blocks in all classes when loading and analyzing them, which can cause
unexpected effects and in some cases make the tests fail.

The Eclipse IDE allows to run all tests in a single Java project or source 
folder directly from the context menu, but doesn't extend this functionality
to the entire workspace. (For good reasons, as we will explain in the talk.)
There are approaches to mitigate this issue (e.g. [2]), but they have their
own shortcomings. Still, they clearly show the need for a solution in this 
area.

After discussing the current status of test suite management in Eclipse, we
introduce a new approach to address these issues; we'll also demonstrate a
prototypical implementation which we are currently developing at Project Usus[3].

[1] http://johanneslink.net/projects/cpsuite.jsp
[2] http://marketplace.eclipse.org/content/run-all-tests
[3] http://projectusus.org


One suite that suits them all

In vielen Softwareprojekten mit einer etwas größeren Codebasis stellt 
sich schnell die Frage, wie die Suite aller Unit Tests gewartet werden soll.
Schließlich ist es für Entwickler oft wichtig, sämtliche Test Cases auf 
Knopfdruck ausführen zu können. Eine explizite Klasse AllTests hat die
offensichtliche Schwäche, daß die manuelle Wartung aufwendig und fehleranfällig 
ist. Die bekannte ClassPathSuite[1] löst dieses Problem elegant, hat allerdings
Schwächen in der Performance auf großen Workspaces und triggert außerdem beim
Laden der Klassen statische Codeblöcke; dies kann zu unerwarteten Nebeneffekten
und im Extremfall zum unrealistischen Abbruch eines Tests führen. Und warum
eigentlich (fragt sich so mancher Eclipse-Nutzer), kann ich auf einem einzelnen
Projekt oder Source Folder mit Rechtsklick ein "Run As > Unit Test" auslösen, 
und damit automatisch alle Test Cases einsammeln lassen, aber nicht auf mehreren
Projekten oder Source Foldern gleichzeitig?

Wir beleuchten die Hintergründe dieser Fragestellungen und stellen einen aus den
Ergebnissen dieser Diskussion folgenden Lösungsansatz vor. Dazu demonstrieren
wir eine prototypische Implementierung, die wir zur Zeit im Projekt Usus[2] 
vornehmen.

TODO check links
[1] http://johanneslink.net/cpsuite
[2] http://projectusus.org
#Ant (pattern **/*Test)

Speaker bio: Entwicklertag

- TODO research: kann irgendjemand "Run As" -> alle Test Cases?

- Situation/Motivation
- Rechtsklick -> geht aber nur für einzelne SF/P
- Erklärungskapitel zu multi-Source Folder/Project
- naiver Ansatz - explizite AllTests
- Stärken / Schwächen der ClassPathSuite (automatisiert naiven Ansatz)
- Lösungsmöglichkeiten
  - JUnit Runner/UI in Eclipse erweitern
  - Composite launch
- Problemlösung: Scannen in Usus, merken Test Cases, Suite, die sich zum
  Plugin verbindet und Suite automatisch baut
  -> Schwäche: läuft nur, wenn unser Plugin läuft
  -> läuft nur im Kontext eines Projekts, das alle anderen Projekte kennt
  
Baum: Projekte und Test Cases